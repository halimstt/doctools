import{h as P,d as Q,s as h,f as V,g as X,a as Z,b as _,r as ee,p as te}from"./navigation-z5wmppBJ.js";const $=document.getElementById("parser-select"),T=document.getElementById("upload-area"),G=document.getElementById("file-input"),N=document.getElementById("upload-label"),M=document.getElementById("file-info"),B=document.getElementById("file-pills-container"),ne=document.getElementById("remove-all-files-btn"),y=document.getElementById("process-btn"),U=document.getElementById("download-btn"),D=document.getElementById("status-text"),b=document.getElementById("process-btn-text"),C=document.getElementById("spinner-process");document.getElementById("results-container");const w=document.getElementById("results-table-body");let f=[],x=[];function Y(){f=[],x=[],G.value="",M.classList.add("hidden"),N.classList.remove("hidden"),y.disabled=!0,D.textContent="",P(),k(),b.textContent="Process",C.classList.add("hidden"),F([]),S()}function k(){B.innerHTML="",f.length===0?(M.classList.add("hidden"),N.classList.remove("hidden")):(f.forEach((r,i)=>{const n=document.createElement("span");n.className="badge badge-md badge-info mr-2 mb-2",n.innerHTML=`
        ${r.name}
        <button type="button" class="ml-2" data-index="${i}">
          <svg class="h-3 w-3" stroke="currentColor" fill="none" viewBox="0 0 8 8">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M1 1l6 6m0-6L1 7" />
          </svg>
        </button>
      `,n.querySelector("button").addEventListener("click",l=>{const t=parseInt(l.currentTarget.dataset.index);se(t)}),B.appendChild(n)}),M.classList.remove("hidden"),N.classList.add("hidden")),y.disabled=f.length===0}function F(r){if(w.innerHTML="",!r||r.length===0){const i=document.createElement("tr");i.innerHTML=`
      <td colspan="3" class="text-center">
        No documents processed yet.
      </td>
    `,w.appendChild(i);return}try{r.forEach(i=>{const n=document.createElement("tr"),l=document.createElement("td");l.textContent=i.Date||"",n.appendChild(l);const t=document.createElement("td");t.textContent=i.Description||"",n.appendChild(t);const e=document.createElement("td"),o=i.Amount||"";if(e.textContent=o,typeof o=="string"&&o.trim()!==""){const a=parseFloat(o);e.classList.add("text-right","font-mono"),e.classList.toggle("text-success",a>0),e.classList.toggle("text-error",a<0)}n.appendChild(e),w.appendChild(n)})}catch{h("error","Could not display results due to an internal error. Check the console.")}}function S(){const r=w.children.length>0&&w.children[0].textContent.trim()!=="No documents processed yet.";U.disabled=!r}function O(r){const i=V(r);if(i.length===0){h("error","Please select valid PDF file(s)."),f.length===0&&(y.disabled=!0);return}i.forEach(n=>{f.some(l=>l.name===n.name&&l.size===n.size)||f.push(n)}),k(),y.disabled=f.length===0,P()}function se(r){f=ee(f,r),k(),f.length===0&&P()}function W(r){const i={Jan:0,Feb:1,Mar:2,Apr:3,May:4,Jun:5,Jul:6,Aug:7,Sep:8,Oct:9,Nov:10,Dec:11},n=r.split(" ");if(n.length===3){const l=parseInt(n[0],10),t=i[n[1]],e=parseInt(n[2],10);if(!isNaN(l)&&t!==void 0&&!isNaN(e))return new Date(e,t,l)}return new Date("Invalid Date")}async function ae(r){let i=null,n=null;const l=[{regex:/(\d{1,2}\s+\w{3}\s+\d{4})/g,parser:W},{regex:/(\d{2}\/\d{2}\/\d{2}(?:\d{2})?)/g,parser:e=>{const o=te(e);return isNaN(o)?new Date("Invalid Date"):new Date(o)}}],t=new Set;for(let e=1;e<=Math.min(r.numPages,3);e++)t.add(e);if(r.numPages>3)for(let e=Math.max(1,r.numPages-2);e<=r.numPages;e++)t.add(e);console.log(`--- Starting date peek for PDF with ${r.numPages} pages ---`);for(const e of Array.from(t).sort((o,a)=>o-a))try{const s=(await(await r.getPage(e)).getTextContent()).items.map(d=>d.str).join(" ");console.log(`  Scanning page ${e} for dates...`);for(const{regex:d,parser:g}of l){let p;for(d.lastIndex=0;(p=d.exec(s))!==null;){const c=p[1],u=g(c);if(isNaN(u.getTime()))console.warn(`    Page ${e}: Matched date string "${c}" but failed to parse with its parser.`);else{const m=u.getTime();(i===null||m<i)&&(i=m),(n===null||m>n)&&(n=m),console.log(`    Page ${e}: Found date "${c}" -> Parsed: ${new Date(m).toLocaleDateString()}`)}}}}catch(o){console.warn(`Error peeking page ${e} for dates:`,o)}return console.log(`--- Peeked results for PDF: Earliest: ${i?new Date(i).toLocaleDateString():"N/A"}, Latest: ${n?new Date(n).toLocaleDateString():"N/A"} ---`),{earliestDate:i,latestDate:n}}async function re(){let r=[...f];if(r.length===0){h("error","Please select at least one PDF file first.");return}y.disabled=!0,C.classList.remove("hidden"),b.textContent="Analyzing files...",D.textContent="Analyzing files for sorting...",P(),x=[];let i=X();if($.value==="gemini-parser"&&!i)try{const n=await Z();if(!n){h("error","Gemini API key is required for this parser. Processing canceled."),y.disabled=!1,C.classList.add("hidden"),b.textContent="Process";return}i=n}catch{h("error","Could not get Gemini API key. Processing canceled."),y.disabled=!1,C.classList.add("hidden"),b.textContent="Process";return}try{const n=await _(),l=[];for(let t=0;t<r.length;t++){const e=r[t];D.textContent=`Analyzing dates in ${e.name} (${t+1}/${r.length})...`;const o=new FileReader,a=new Promise((c,u)=>{o.onload=m=>c(m.target.result),o.onerror=u,o.readAsArrayBuffer(e)}),s=new Uint8Array(await a),d=await n.getDocument(s).promise,{earliestDate:g,latestDate:p}=await ae(d);l.push({file:e,pdf:d,earliestDate:g,latestDate:p,originalIndex:t})}console.log("Files before sorting:"),l.forEach(t=>console.log(`  - ${t.file.name}: Earliest: ${t.earliestDate?new Date(t.earliestDate).toLocaleDateString():"N/A"}, Latest: ${t.latestDate?new Date(t.latestDate).toLocaleDateString():"N/A"}`)),l.sort((t,e)=>{if(t.latestDate===null&&e.latestDate===null)return t.originalIndex-e.originalIndex;if(t.latestDate===null)return 1;if(e.latestDate===null)return-1;const o=e.latestDate-t.latestDate;if(o!==0)return o;if(t.earliestDate===null&&e.earliestDate===null)return t.originalIndex-e.originalIndex;if(t.earliestDate===null)return 1;if(e.earliestDate===null)return-1;const a=e.earliestDate-t.earliestDate;return a!==0?a:t.originalIndex-e.originalIndex}),console.log("Files after sorting:"),l.forEach(t=>console.log(`  - ${t.file.name}: Earliest: ${t.earliestDate?new Date(t.earliestDate).toLocaleDateString():"N/A"}, Latest: ${t.latestDate?new Date(t.latestDate).toLocaleDateString():"N/A"}`));for(let t=0;t<l.length;t++){const{file:e,pdf:o}=l[t];D.textContent=`Processing ${e.name} (${t+1}/${l.length})...`;let a=[];switch($.value){case"maybank-pdf":D.textContent=`Analyzing content in ${e.name} (Maybank PDF mode)...`;const s=await oe(o);a=ie(s);break;case"maybank-web":D.textContent=`Analyzing content in ${e.name} (Maybank Web mode)...`;const d=await le(o);a=ce(d);break;case"gemini-parser":D.textContent=`Sending pages of ${e.name} to AI for processing...`,a=await de(o,i);break;default:throw h("error","Invalid parser selected. Please choose a valid statement type."),new Error("Invalid parser selected.")}x=x.concat(a)}D.textContent="",F(x),S(),x.length>0?h("success",`${l.length} PDF(s) processed and converted file ready for download!`):h("error","No valid transactions were extracted from the selected PDF(s). Please check your file(s) and selected parser type.")}catch(n){h("error",`An error occurred during PDF conversion: ${n.message}. Please check the console for details and ensure your Gemini API is enabled for this project if using the AI parser.`),console.error("Processing error:",n)}finally{y.disabled=!1,C.classList.add("hidden"),b.textContent="Process",D.textContent="Processing your statements..."}}async function oe(r){const i=[];for(let n=1;n<=r.numPages;n++){const t=await(await r.getPage(n)).getTextContent(),e={};for(const a of t.items){const s=Math.round(a.transform[5]);e[s]||(e[s]=[]),e[s].push(a)}const o=Object.keys(e).sort((a,s)=>s-a);for(const a of o)e[a].sort((s,d)=>s.transform[4]-d.transform[4]),i.push(e[a].map(s=>s.str).join(" "))}return i}function ie(r){const i=r.join(" ").match(/STATEMENT DATE\s*:\s*(\d{2}\/\d{2}\/\d{2})/i),n=i?`20${i[1].slice(-2)}`:new Date().getFullYear().toString(),l=[];let t=!1;for(const s of r){if(/ACCOUNT\s*TRANSACTIONS/i.test(s)){t=!0;continue}if(/BAKI\s*LEGAR/i.test(s)){t=!1;continue}if(t){if(/TARIKH\s*MASUK/i.test(s)&&/TARIKH\s*NILAI/i.test(s)||/進支日期/i.test(s)&&/仄過賬日期/.test(s)||/ENTRY\s*DATE/i.test(s)&&/VALUE\s*DATE/i.test(s)||/BEGINNING\s*BALANCE/i.test(s)||s.trim()==="=")continue;l.push(s)}}const e=[];let o=[];for(const s of[...l].reverse()){if(/TIADA\s*URUSNIAGA/i.test(s)||/NO\s*TRANSACTION/i.test(s)||/TOTAL\s*DEBIT/i.test(s)||/ENDING\s*BALANCE/i.test(s)||/LEDGER\s*BALANCE/i.test(s)){o=[];continue}const g=s.match(/^\s*(\d{2}\/\d{2})\s+(.*?)\s+([\d,]*\.\d{1,2}[+-])(?:\s+[\d,]*\.\d{2})?$/);if(g){let p=g[1],c=g[2];const u=g[3],m=u.replace(/,/g,"").replace(/[+-]$/,""),L=u.slice(-1);let E=parseFloat(m);if(L==="-"&&(E=-E),p===void 0&&o.length>0){const A=o.findIndex(I=>/^\d{2}\/\d{2}/.test(I.trim()));if(A>-1){const I=o.splice(A,1)[0];p=I.trim().substring(0,5),c=I.trim().substring(5).trim()+" "+c}}o.length>0&&(c=c.trim()+" "+o.reverse().join(" ")),p&&e.push({Date:`${p}/${n}`,Description:c,Amount:E}),o=[]}else s.trim().length>1&&o.push(s.trim())}return e.reverse().map(s=>{const d=String(s.Description).replace(/TRANSFER FR A\/C/gi,"").replace(/TRANSFER TO A\/C/gi,"").replace(/PAYMENT FR A\/C/gi,"").replace(/MBB CT-?/gi,"").replace(/\s+/g," ").trim();return{Date:s.Date,Description:d,Amount:parseFloat(s.Amount).toFixed(2)}})}async function le(r){let i="";for(let n=1;n<=r.numPages;n++){const t=await(await r.getPage(n)).getTextContent();let e=-1,o="";t.items.sort((a,s)=>a.transform[5]<s.transform[5]?1:a.transform[5]>s.transform[5]||a.transform[4]<s.transform[4]?-1:a.transform[4]>s.transform[4]?1:0);for(const a of t.items)e!==-1&&Math.abs(a.transform[5]-e)>5&&(i+=o.trim()+`
`,o=""),o+=a.str+" ",e=a.transform[5];i+=o.trim()+`
`}return i}function ce(r){const i=[],n=/^\d{1,2}\s+\w{3}\s+\d{4}/,l=/(-?)\s*RM\s*([\d,]+\.\d{2})\s*$/,t=r.split(`
`);let e=null;for(const o of t){const a=o.trim();if(!a||a.toLowerCase().startsWith("date")||a.toLowerCase().startsWith("description")||a.toLowerCase().startsWith("amount"))continue;if(n.test(a)){e&&i.push(e);let d=a.match(n)[0],g=a.replace(n,"").trim(),p=g.match(l),c=g,u=null;p&&(u=(p[1]||"")+p[2].replace(/,/g,""),c=c.replace(p[0],"").trim()),e={date:d,description:c,amount:u}}else if(e&&!e.amount){let d=a.match(l),g=a;d&&(e.amount=(d[1]||"")+d[2].replace(/,/g,""),g=g.replace(d[0],"").trim()),e.description+=" "+g}else if(e&&e.amount){const d=i[i.length-1];d?d.Description+=" "+a:e&&(i.push(e),e=null)}}return e&&i.push(e),i.map(o=>{const a=W(o.date),s=String(a.getDate()).padStart(2,"0"),d=String(a.getMonth()+1).padStart(2,"0"),g=a.getFullYear(),p=`${s}/${d}/${g}`,c=String(o.description).replace(/\s+/g," ").trim(),u=c.startsWith('"')&&c.endsWith('"')?c.substring(1,c.length-1):c;return{Date:p,Description:u,Amount:parseFloat(o.amount).toFixed(2)}})}async function de(r,i){const n=[],l=r.numPages;if(!i)throw new Error("Gemini API key is missing. Please provide it.");for(let t=1;t<=l;t++){D.textContent=`Processing page ${t}/${l} using AI...`;const a=(await(await r.getPage(t)).getTextContent()).items.map(c=>c.str).join(" ");let s=[];const d=`You are an expert at extracting financial transactions from bank statements.
      Extract all transactions from the following page text.
      For each transaction, identify the 'Date', 'Description', and 'Amount'.

      Rules for extraction:
      - The Date should be in DD/MM/YYYY format. If only DD/MM is present, assume the current year for a full DD/MM/YYYY format.
      - The Description should be a concise summary of the transaction.
      - The Amount should be a numeric value. It must be positive for incoming funds (credit/deposit) and negative for outgoing funds (debit/withdrawal/expense). Do not include currency symbols (like RM).
      - **Crucially, determine the sign of the Amount based on explicit indicators and context:**
          - If the original text explicitly shows a minus sign (e.g., "-123.45") or uses terms like "DEBIT", "WITHDRAWAL", "PAYMENT", "CHARGE", "PURCHASE", "OUTGOING", "TRANSFER TO", "QR PAY SALES", "MBB CT", then the Amount MUST be negative.
          - If the original text explicitly shows a plus sign (e.g., "+123.45") or uses terms like "CREDIT", "DEPOSIT", "INCOMING", "TRANSFER FROM", "DUITNOW QR", "RECEIPT", "REFUND", then the Amount MUST be positive.
          - If there is no explicit sign, carefully analyze the description and surrounding context to infer if it's an inflow (credit, positive) or outflow (debit, negative).
      - Ignore any opening/closing balances, totals, page numbers, headers, footers, or non-transactional text.
      - If multiple transactions are found, return them as an array of objects.
      - If no transactions are found on this page, return an empty array.

      Here is the bank statement page text:
      """
      ${a}
      """
      `;s.push({role:"user",parts:[{text:d}]});const g={contents:s,generationConfig:{responseMimeType:"application/json",responseSchema:{type:"ARRAY",items:{type:"OBJECT",properties:{Date:{type:"STRING",description:"Transaction date in DD/MM/YYYY format."},Description:{type:"STRING",description:"Concise description of the transaction."},Amount:{type:"NUMBER",description:"Numeric amount, positive for credit, negative for debit."}},required:["Date","Description","Amount"]}}}},p=`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${i}`;try{const c=await fetch(p,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(g)});if(!c.ok){const m=await c.text();throw new Error(`API request failed for page ${t}: ${c.status} ${c.statusText}. Details: ${m}`)}const u=await c.json();if(u.candidates&&u.candidates.length>0&&u.candidates[0].content&&u.candidates[0].content.parts&&u.candidates[0].content.parts.length>0){const m=u.candidates[0].content.parts[0].text;let L;try{L=JSON.parse(m)}catch{h("error",`AI response for page ${t} could not be parsed. Skipping this page.`);continue}const E=L.map(A=>{let[I,j,v]=A.Date.split("/");const H=new Date().getFullYear(),z=String(H).slice(-2),R=parseInt(v,10),J=R<=parseInt(z,10)+50?"20":"19",K=v.length===4?v:`${J}${String(R).padStart(2,"0")}`,q=String(A.Description).replace(/\s+/g," ").trim();return{Date:`${String(I).padStart(2,"0")}/${String(j).padStart(2,"0")}/${K}`,Description:q,Amount:parseFloat(A.Amount).toFixed(2)}});n.push(...E)}else{let m=`No valid content found for page ${t} in Gemini API response.`;u.promptFeedback&&u.promptFeedback.blockReason&&(m+=` Block reason: ${u.promptFeedback.blockReason}.`,u.promptFeedback.safetyRatings&&(m+=` Safety ratings: ${JSON.stringify(u.promptFeedback.safetyRatings)}.`)),h("error",`AI processing warning for page ${t}: ${m}`)}}catch(c){h("error",`AI processing failed for page ${t}: ${c.message}.`)}}return n}document.addEventListener("DOMContentLoaded",()=>{Y(),S(),$.addEventListener("change",()=>{F([]),S(),P(),D.textContent="",y.disabled=f.length===0}),G.addEventListener("change",r=>{O(r.target.files)}),ne.addEventListener("click",Y),T.addEventListener("dragover",r=>{r.preventDefault(),T.classList.add("upload-area-highlight")}),T.addEventListener("dragleave",()=>{T.classList.remove("upload-area-highlight")}),T.addEventListener("drop",r=>{r.preventDefault(),T.classList.remove("upload-area-highlight"),O(r.dataTransfer.files)}),y.addEventListener("click",re),U.addEventListener("click",()=>{Q(x,["Date","Description","Amount"],"transactions.csv")})});
